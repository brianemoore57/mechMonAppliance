===============================================================================
Configuring Beaglebone ARM processor on the Debian Distribution
===============================================================================
Brian E. Moore, PE
Moore Technical Services, LLC
moore-brian48@sbcglobal.net
copyright (c) 2015 by Moore Technical Scervices, LLC

(Linux beaglebone 3.8.13-bone47 #1 SMP Fri Apr 11 01:36:09 UTC 2014 armv7l GNU/Linux)

We will probably not develop any more using ethernet over USB connection, as it requires a lot of effort only to be
undone. Using the wired or Wi-Fi (Logic Supply's UWN200 USB external adapter with 4" antenna) connections represents
the installation environment best during development. The ethernet over USB may be used for installation during early
development. A mature product will be installed via flash into eprom from microSD. The following assumes a Cygwin or
linux environment on the company laptop/server.

FIRMWARE PREPARATION
The preparation of a new beaglebone black (without cape) requires the following steps:

1. Connect the 5V 2A supply to the beaglebone. Observe the blue LEDs as the boot sequence exercises them. Once booted
   fully, the USB0 LED flashes continuously, about once per second.

2. Flash the upgraded OS if required from the micro SD. Insert the SD and reboot the board while holding down
   the small button on the board itself. This boots from the SD and transfers it onto the onboard Flash ROM.
   Note that we can eventually create our flash image with ALL customization on it.

3. Connect to it via USB.

4. Default address is 192.168.7.2. A different static IP may be desired in the lab, and a final IP will be assigned in the field. An
   explanation is at https://www.howtoforge.com/debian-static-ip-address.

5. Execute install.sh script on the company laptop/server which copies a complete project directory as
    /usr/local/mechMon onto the BBB, including the following:
     a. build.sh - change to a grunt deploy process on company laptop/server
     b. boot.sh - must be configured to run on bootup. Note we have NO BIOS, so date/time DNS, etc must be set on bootup
     c. startup.sh - launches server
     d. shutdown.sh - kills server
     e. company ssh private key(s) so unit can communicate with company cloud server and service technician.

6. Execute /usr/local/mecMon/build.sh - It will make directories, set permissions, etc. It may upgrade the
7. If a cape is to be used, i.e. CBB-Relay cape, a .dtbo file must be installed into /lib/firmware.
7.1 Currently have to 'npm install bonescript' in the mechMon project.
7.2 we will soon change all this so that we can npm install OUR project with all these
  dependencies.
8. Close all login methods other than ssh private keys (no password login).
9. Test
      a. test that date/time are set
      b. check ifconfig that address is as desired
      b. check that ping 8.8.8.8 works (route is good)
      c. check ping www.google.com works (dns is good)
      d. check 'ps aux | grep node server.js 2000' returns a value (Note another node instance is probably running)

INITIAL DESIGN DECISIONS

The installed node is version 0.10.2, and is required for Express, etc. The angstrom distribution has node v~0.8.02
and will not run the latest Express. Our server will use the built-in service tools to take server up/down, auto-start
(on boot) by file location, etc. The cloud9 environment is all setup to run on port 3000, and is a service that
auto-starts on boot. We will disable that one. For now, we will use port 2000.

BOOTING

The booting requirements beyond what the platform does by itself, include making sure all pins and CAPE devices
are in a known state. So somewhere in our boot process, we need to set them. Since the boot script itself is a BASH
script, I prefer to set the pins with javascript when the server is launched. You will see code in server.js that
initializes some of the pins, but must be expanded.
===============================================================================
ENGINEERING TIPS
===============================================================================

Just something to study:
avahi wiki site http://en.wikipedia.org/wiki/Avahi_%28software%29
Avahi is a free zero-configuration networking (zeroconf) implementation, including a system for multicast
DNS/DNS-SD service discovery. It is licensed under the GNU Lesser General Public License (LGPL).Avahi is a system
which enables programs to publish and discover services and hosts running on a local network. For example, a user
can plug their computer into a network and have Avahi automatically advertise the network services running on the
machine which could enable access to files and printers.

Software architecture

Architectural overview of the Avahi software framework
Avahi implements the Apple Zeroconf specification, mDNS, DNS-SD and RFC 3927/IPv4LL. Other implementations include
Apple's Bonjour framework (the mDNSResponder component of which is licensed under the Apache License).
Avahi provides a set of language bindings (Python, Mono, etc.) and ships with most Linux and *BSD distributions.
Because of its modularized architecture, major desktop components like GNOME's Virtual File System and the KDE input/output architecture already integrate Avahi.
Avahi vs. Bonjour
The Avahi project started in 2004 because Apple's Zeroconf implementation, Bonjour, used the GPL-incompatible Apple
Public Source License. Subsequently[when?] Apple relicensed parts of Bonjour under the Apache License. However,
Avahi had already become the de facto standard implementation of mDNS/DNS-SD on free-software operating systems such
as GNU/Linux.[citation needed]

Avahi's performance resembles that of Bonjour, sometimes exceeding it; however Avahi can lose services when managing
large numbers of requests simultaneously.[1]
see http://www.avahi.org/
avahi-daemon - then as a zeroconf hostname simplifies SSHing with a local machine by assigning it a hostname on the local
LAN. This way we don't need to know the IP (which can change over time) to start a SSH session.
On the Beaglebone
sudo apt-get install avahi-daemon
# On the PC
ssh <beagle-username>@<beagle-hostname>.local

---- Bonescript project repositories
There are several projects related to bonescript on github
Note that the .dtbo file provided with a cape is for 'direct' use with sysFS syntax, etc. Using that with
bonescript is a conflict as both configure directories in /sys/class/gpio. Caused me lots of problems. Just
forget the cape's *.dtbo if you are using bonescript. Otherwise, use the cape's *.dtbo and create shell scripts, like
echo 1 > /sys/class/gpio/gpio115/value to set a bit.

-jadon/bonescript
  Scripting tools for the BeagleBoard and BeagleBone
-jadon/bone101
  Presentation web server written in bonescript
-igxlogic/BoneScript-SocketIO
  Control a BBB using Socket.IO
-michaelcdillon/Bonescript Serial
Enable the serial ports on the BB for NodeJS usage
-dollfreaks/bonescript
  A ClojureScript wrapper for the bonescript library
-jadonk/blockly-bonescript
  Graphical programming with Bonescript
  A total of 31 beagle-bone related repositories were found (bem 01/21/14)

The CBBRelay cape is from Logic_Supply. See the source for the cape firmware is
 https://github.com/jadonk/cape-firmware/blob/master/arch/arm/boot/dts/BB-ADC-00A0.dts
 The file is compiled with 'dtc' to produce a *.dtbo file. It can be directly downloaded, however.
A fork of bonescript.js is at https://www.npmjs.com/package/octalbonescript
Reference on compiling a cape boards overlay file is at
https://learn.adafruit.com/introduction-to-the-beaglebone-black-device-tree/compiling-an-overlay
 A sample compilation of a different board's file looks like:
   root@beaglebone:~#dtc -O dtb -o ADAFRUIT-SPI0-00A0.dtbo -b 0 -@ ADAFRUIT-SPI0-00A0.dts
and produces:
   root@beaglebone:~# ls -ltr
...
   -rw-r--r-- 1 root root 1255 Jul 29 14:33 ADAFRUIT-SPI0-00A0.dts
   -rw-r--r-- 1 root root 1042 Jul 29 14:35 ADAFRUIT-SPI0-00A0.dtbo

http://kilobaser.com/blog/2014-07-15-beaglebone-black-gpios is a very good article.

/sys/devices/bone_capemgr.9 is a directory with properties of the device, in directories such as:
baseboard  driver  modalias  power  slot-4  slot-5  slot-7  slot-8  slots  subsystem  uevent
looking in the slots directory shows us:
Another is:
   http://www.logicsupply.com/blog/2013/07/18/disabling-the-beaglebone-black-hdmi-cape/
which we disabled the hdmi
optargs=quiet capemgr.disable_partno=BB-BONELT-HDMI,BB-BONELT-HDMIN
root@beaglebone:~# less /sys/devices/bone_capemgr.9/slots

 1: 55:PF---
 2: 56:PF---
 3: 57:PF---
 4: ff:P-O-L Bone-LT-eMMC-2G,00A0,Texas Instrument,BB-BONE-EMMC-2G
 5: ff:P-O-L Bone-Black-HDMI,00A0,Texas Instrument,BB-BONELT-HDMI
 7: ff:P-O-L Override Board Name,00A0,Override Manuf,bspm_P8_18_f
 8: ff:P-O-L Override Board Name,00A0,Override Manuf,bspm_P9_27_f

========================================================================
  Installation (flash)of emmc with new debian OS image
========================================================================
Source of Rev C Debian image we are now using to re-flash from
  http://elinux.org/Beagleboard:BeagleBoneBlack_Debian#BBB_Rev_C_.284GB_eMMC.29
  I have successfully downloaded and called debian2, dated 12-31-2014
  https://rcn-ee.net/rootfs/bb.org/testing/2014-12-31/lxde-4gb/BBB-eMMC-flasher-debian-7.7-lxde-4gb-armhf-2014-12-31-4gb.img.xz
  md5sum: 4a1b0fc8fbb24bb94f360f050f4f6507
1. Download new emmc image from beaglebone.org (they also have version to boot direct from SD)
2. Decompress the image with 7Zip.
3. Insert microSD in its holder and into PC.
3.5 check md5 hash with winMdSum on Windows, or md5sum -c linux.iso.md5 (check *.xz compressed versions)
4. Bring up 'Win32DiskImager aka Image Writer' a Windows program( download if not already)
5. Enter path to image, SD location (drive G,probably), and check MD5 box.
6. Click on write, and it will take maybe 10 minutes to write out image to card.
7.1 Connect BBB to monitor, keyboard,mouse, and ethernet.
7. To flash onto BBB, install SD card, hold down USR/BOOT button until first of the OP LEDs flash.
8. Wait while programming occurs. When flashing is complete, all 4 USRx LEDs will be steady on or
   off. This can take up to 45 minutes. Pay no attention to the pattern of the LEDs, go by the screen data.
9. Power-down your board, remove the SD card and apply power again to be complete.

see http://beagleboard.org/getting-started#update

To partition/reformat a SD card on Windows (7):
1. launch a CMD window
2. start DISKPART, i.e. $ DISKPART <Enter> (same as fdisk in Linux)
3. LIST DISK, carefully note disk number, i.e. (0,1,2)
4. SELECT DISK #, i.e. SELECT DISK 1, NOT 0 its probably your HD
5. CLEAN
6. CREATE PARTITION PRIMARY
7. FORMAT FS=FAT32 QUICK
8. ASSIGN LETTER=G, probably best

also:
You can use the official SDCard.org application (Windows / Mac).
https://www.sdcard.org/downloads/formatter_3

http://www.partition-tool.com/personal.htm
========================================================================
                  ssh config settings
========================================================================

OpenSSH supports a thing called keepalive – a keepalive packet is sent after a predetermined interval of
inactivity so SSH sessions should not time out. Keepalive can be set on server side or client side.
Client side is usually better because then all possible connections are kept alive.

Client side:
edit
/etc/ssh/ssh_config
and enable
ServerAliveInterval 30

or if You can not edit global config file put the same line in Your personal config file:
~/.ssh/config

Server side:
edit
/etc/ssh/sshd_config
and enable
ClientAliveCountMax 10
ClientAliveInterval 30

This means that after 30 seconds of inactivity server sends a keepalive message.
After 10 messages without responses from client connection is dropped.

This is different from TCPKeepAlive, as manual says: "If they are sent, death of the connection or crash of
one of the machines will be properly noticed." However, this means that connections will die if the route is
down temporarily, and some people find it annoying. Actually TCPKeepAlive is on by default but I still get
disconnects from some servers behind some firewall or DSL device. Go figure. BBB times out regularly. I just
had it time out and then the wifi was off-line, had to reboot.

There are man pagse for ssh_config and sshd_config, i.e. $ man sshd_config The snippets below are from latter:

 ClientAliveCountMax
             Sets the number of client alive messages (see below) which may be sent with-
             out sshd(8) receiving any messages back from the client.  If this threshold
             is reached while client alive messages are being sent, sshd will disconnect
             the client, terminating the session.  It is important to note that the use of
             client alive messages is very different from TCPKeepAlive (below).  The
             client alive messages are sent through the encrypted channel and therefore
             will not be spoofable.  The TCP keepalive option enabled by TCPKeepAlive is
             spoofable.  The client alive mechanism is valuable when the client or server
             depend on knowing when a connection has become inactive.

             The default value is 3.  If ClientAliveInterval (see below) is set to 15, and
             ClientAliveCountMax is left at the default, unresponsive SSH clients will be
             disconnected after approximately 45 seconds.  This option applies to protocol
             version 2 only.

     ClientAliveInterval
             Sets a timeout interval in seconds after which if no data has been received
             from the client, sshd(8) will send a message through the encrypted channel to
             request a response from the client.  The default is 0, indicating that these
             messages will not be sent to the client.  This option applies to protocol
             version 2 only.

After reading the BBB Debian default settings, important settings are:
1. PermitRootLogin yes
2. PermitEmptyPasswords yes
3. TCPKeepAlive yes
4. Subsystem sftp /usr/lib/openssh/sftp-server

===============================================================================
                The ~/.ssh/config file (my personal laptop version
===============================================================================

## Brian E. Moore, PE ##

### default for all ##
Host *
     ServerAliveInterval 30
     ServerAliveCountmax 2400

## bench test beaglebone ##
Host debian2
     HostName debian2
     User debian</p>
     IdentityFile ~/.ssh/id_rsa

## home mechanical room server 1 ##
Host mechroom1
     HostName mechroom1
     User root</p>
     IdentityFile ~/.ssh/id_rsa

## bench test beaglebone on usb
Host beaglebone
     Hostname 192.168.7.2
     User root
     IdentityFile ~/.ssh/id_rsa
     StrictHostKeyChecking=no

## Login AWS Cloud ##
Host mts-app.com
     Hostname mts-app.com
     User ubuntu</p>
     IdentityFile ~/.ssh/server1.pem

Copy your public key to the server with ssh-copy root@remote_host. This command also takes care of
the directory and file permissions.

This file permits ssh'ing into my AWS server as  ssh mts-app.com without password. An issue with ssh is
that you have local user and remote user names. If they are different, you clarify with -l <username>. With use of
a personal config file like shown above, this is reduced to ssh mts-app.com. If you have a problem, use the verbose
flag ssh -v mts-app.com and see how far the process went.

Note that microwave ovens operate at 2.45 GHz and 802.11b/g/n at 2.4 GHz. I have watched a M/W oven immediately
terminate a wireless ssh connection.
I understand that some firewalls strip the TCPKeepAlive, so we lose that benefit.
I think our engineering standard should be to turn on both kinds of keepalive on both client and server
config files since the BBB may be ssh'd in or out of. Then policy would be:

a. Leave on TCPKeepalive, i.e. yes
b. set client file  ServerAliveInterval 30
c. set server file ClientAliveCountMax 10, ClientAliveInterval 30
d. we will eventually tighten to strict host key, no empty passwords, allow root password,allow key-pairs
========================================================================
Use of ssh keys, here is github's literature:
========================================================================
check for public keys....
ls -al ~/.ssh
# Lists the files in your .ssh directory, if they exist
Check the directory listing to see if you already have a public SSH key. The default public key file names are:

id_dsa.pub
id_ecdsa.pub
id_ed25519.pub
id_rsa.pub

Step 2: Generate a new SSH key

To generate a new SSH key, copy and paste the text below, making sure to substitute in your email address. The default
settings are preferred, so when you're prompted to "Enter a file in which to save the key", just press Enter to
continue.

 ssh-keygen -t rsa -C "your_email@example.com"
# Creates a new ssh key, using the provided email as a label
# Generating public/private rsa key pair.
# Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]
Next, you'll be asked to enter a passphrase.

Tip: We strongly recommend a very good, secure passphrase. For more information, see Working with SSH key passphrases.
# Enter passphrase (empty for no passphrase): [Type a passphrase]
# Enter same passphrase again: [Type passphrase again]
Which should give you something like this:

 # Your identification has been saved in /c/Users/you/.ssh/id_rsa.
# Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.
# The key fingerprint is:
# 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com
Then add your new key to the ssh-agent:

 # start the ssh-agent in the background
ssh-agent -s
# Agent pid 59566
ssh-add ~/.ssh/id_rsa

Step 3: Add your SSH key to your account

Run the following command to copy the key to your clipboard. Keep in mind that your key may also be named id_dsa.pub,
 id_ecdsa.pub or id_ed25519.pub.

$ clip < ~/.ssh/id_rsa.pub
# Copies the contents of the id_rsa.pub file to your clipboard

Alternatively, using your favorite text editor, you can open the public key file and copy the contents of the file manually.

Now that you have the key copied, it's time to add it to GitHub:

In the top right corner of any page, click .

In the user settings sidebar, click SSH keys.

Click Add SSH key.

In the Title field, add a descriptive label for the new key. For example, if you're using a personal Mac, you might call
this key "Personal MacBook Air".
The key field: Paste your key into the "Key" field.
The Add key: buttonClick Add key.
Confirm the action by entering your GitHub password.

Step 4: Test everything out

To make sure everything is working, you'll now try SSHing to GitHub. When you do this, you will be asked to
authenticate this action using your password, which was the passphrase you created earlier.

Open up your Git Bash and type:

ssh -T git@github.com
# Attempts to ssh to GitHub
You may see this warning:

# The authenticity of host 'github.com (207.97.227.239)' can't be established.
# RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
# Are you sure you want to continue connecting (yes/no)?

Don't worry! This is supposed to happen. Verify that the fingerprint in your terminal matches the one we've provided
 up above, and then type "yes."

# Hi username! You've successfully authenticated, but GitHub does not
# provide shell access.

If that username is yours, you've successfully set up your SSH key! Don't worry about the "shell access" thing, you
 don't want that anyway.

If you receive a message about "access denied," you can read these instructions for diagnosing the issue.

If you're switching from HTTPS to SSH, you'll now need to update your remote repository URLs. For more information,
 see Changing a remote's URL. I had to reset the remote repo aliased origin, branch master.

$ git remote set-url origin git@github.com:brianemoore57/mechMonAppliance.git

Then this test works just great!

$ git push origin master
Counting objects: 5, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 3.62 KiB, done.
Total 3 (delta 2), reused 0 (delta 0)
To git@github.com:brianemoore57/mechMonAppliance.git
   f4ea14b..036781b  master -> master

====================================================================================================
USING SSH PASSPHRASEs
=====================================================================================================
Working with SSH key passphrases

This article will walk you through the process of securing your SSH keys and configuring an authentication agent so
that you won't have to re-enter your passphrase every time you use your keys.

Why do I need a passphrase?

Passwords aren't very secure. If you use one that's easy to remember, it's also easier to guess or brute-force
(try many options until one works). If you use one that's random, it's hard to remember, and thus you're more inclined
 to write it down. Both of these are Very Bad Things.

This is why you're using SSH keys. Of course, using a key without a passphrase is basically the same as writing down a
random password: anyone who gains access to your computer has gained access to every system you use that key with. This
 is also a Very Bad Thing. The solution is to add a passphrase to the SSH key for an extra layer of security.

But I don't want to enter a long passphrase every time I use the key!

Neither do I! Thankfully, there's a nifty little tool called ssh-agent that can securely save your passphrase, so you
don't have to re-enter it. If you're on OS X Leopard or later your keys can be saved in the system's keychain to make
 your life even easier. Most Linux installations will automatically start ssh-agent for you when you log in.

Adding or changing a passphrase

You can change the passphrase for an existing private key without regenerating the keypair. Just type the following
command:

ssh-keygen -p
# Start the SSH key creation process
# Enter file in which the key is (/Users/you/.ssh/id_rsa): [Hit enter]
# Key has comment '/Users/you/.ssh/id_rsa'
# Enter new passphrase (empty for no passphrase): [Type new passphrase]
# Enter same passphrase again: [One more time for luck]
# Your identification has been saved with the new passphrase.
If your key already has a passphrase, you will be prompted to enter it before you can change to a new passphrase.

Auto-launching ssh-agent on msysgit

ssh-agent is a tool that provides a secure way of storing and using your SSH keys.

You can run ssh-agent automatically when you open bash. Copy the following lines and paste them into your ~/.profile
or ~/.bashrc file:

# Note: ~/.ssh/environment should not be used, as it
#       already has a different purpose in SSH.

env=~/.ssh/agent.env

# Note: Don't bother checking SSH_AGENT_PID. It's not used
#       by SSH itself, and it might even be incorrect
#       (for example, when using agent-forwarding over SSH).

agent_is_running() {
    if [ "$SSH_AUTH_SOCK" ]; then
        # ssh-add returns:
        #   0 = agent running, has keys
        #   1 = agent running, no keys
        #   2 = agent not running
        ssh-add -l >/dev/null 2>&1 || [ $? -eq 1 ]
    else
        false
    fi
}

agent_has_keys() {
    ssh-add -l >/dev/null 2>&1
}

agent_load_env() {
    . "$env" >/dev/null
}

agent_start() {
    (umask 077; ssh-agent >"$env")
    . "$env" >/dev/null
}

if ! agent_is_running; then
    agent_load_env
fi

# if your keys are not stored in ~/.ssh/id_rsa.pub or ~/.ssh/id_dsa.pub, you'll need
# to paste the proper path after ssh-add
if ! agent_is_running; then
    agent_start
    ssh-add
elif ! agent_has_keys; then
    ssh-add
fi

unset env
Tip: If your private keys are not stored in ~/.ssh/id_rsa or ~/.ssh/id_dsa, you must add their paths with the ssh-add
command so that your SSH authentication agent knows where to find them. For example:

ssh-add ~/.my_other_ssh/id_rsa
Now, when you first run Git Bash, you are prompted for your passphrase:

# Initializing new SSH agent...
# succeeded
# Enter passphrase for /c/Users/you/.ssh/id_rsa:
# Identity added: /c/Users/you/.ssh/id_rsa (/c/Users/you/.ssh/id_rsa)
# Welcome to Git (version 1.6.0.2-preview20080923)
>
# Run 'git help git' to display the help index.
# Run 'git help ' to display help for specific commands.

=====================================================================================================

One problem encountered is the loss of access to the beaglebone by corrupting the ssh configuration, then needing
another means of access. Of course a production installation should be of lesser concern, but much development
time lost over this problem. See https://wiki.debian.org/NetworkConfiguration

One trick to know when dealing with lots of different logins, is to temporarily turn off 'StrictHostKeyChecking'
or use the cli option as
# ssh -o 'StrictHostKeyChecking no' user@host, then you get a warning but you can log in and do what you need
to do. The problem is that logging into one BB, then another at the same IP address, they send back different (host)
keys, and your client side cries foul. You can delete the offending key easily. Note the following message tells
us which key is the offending one: (Number 6)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that the RSA host key has just been changed.
The fingerprint for the RSA key sent by the remote host is
a7:a8:f2:97:94:33:58:b7:9d:bc:e0:a6:6b:f7:0a:29.
Please contact your system administrator.
Add correct host key in /home/ramesh/.ssh/known_hosts to get rid of this message.
Offending key in /home/ramesh/.ssh/known_hosts: 6
Permission denied (publickey,password).

So we can delete it with: # sed -i '6d' ~/.ssh/known_hosts

Regarding node.js, for these types of applications, you may not feel your ajax call, especially a POST,
needs return any value to set a bit. But node requires you to return a value, even from a POST [although
you can use res.send(undefined)]. So you might as well return an 'OK' text string. It is easier to diagnose.
You actually need that acknowledgement, and using the 'success' method in the AJAX call, you can change the button
color, etc to update 'state' in the GUI.

Procedure for setting static-ip is not finalized, some references follow:
   pertinent file: /etc/network/interfaces devian tools:
   http://inspire.logicsupply.com/2014/07/beaglebone-wifi-installation.html (best method) wicd-curses tool (wi-fi)
   https://www.howtoforge.com/debian-static-ip-address
   http://sheldondwill.wordpress.com/2013/12/14/beaglebone-black-ubuntu-change-to-static-ip-address/
   http://www.embeddedhobbyist.com/debian-tips/beaglebone-black/beaglebone-black-init-scripts-default-gatewayand-ntpdate/

Excellent assistance for industrial applications:
    http://inspire.logicsupply.com/2014/07/beaglebone-getting-ready-for-industrial.html

Setting app up as a service: http://unix.stackexchange.com/questions/47695/how-to-write-startup-script-for-systemd
   https://savanne.be/articles/deploying-node-js-with-systemd/
   also https://coreos.com/docs/launching-containers/launching/getting-started-with-systemd/ - BEST!!
    and http://www.linux.com/learn/tutorials/788613-understanding-and-using-systemd
by creating a systemd unit file. Note the path to node must of course be correct. For
information regarding systemd vs init.d:    http://www.tecmint.com/systemd-replaces-init-in-linux/
   also https://wiki.debian.org/Debate/initsystem/systemd

Note that most current systems currently implement both for availibility to apps.
see /etc/systemd/system/syslog.service for an example
You can also see the file used by the beaglebone 'bonescript' and 'autorun' services.
We will be turning them off.
Our services unit file is named mechMon.service currently the following. It goes in
v
============================
[Unit]
Description=mechMon

[Service]
ExecStart=/usr/local/mechMon/startup.sh
Restart=always

StandardOutput=syslog
SyslogIdentifier=mechMon
Type=simple
Environment=PATH=/usr/local/lib:/usr/local/mechMon:bin:/usr/bin:/usr/local/bin
#can change following to production to start caching
Environment=NODE_ENV=development

[Install]
WantedBy=multi-user.target
==============================
These are the commands you're probably going to use the most:

# systemctl start [name.service]
# systemctl stop [name.service]
# systemctl restart [name.service]
# systemctl reload [name.service]
$ systemctl status [name.service]
# systemctl is-active [name.service]
$ systemctl list-units --type service --all
systemd has 12 unit types. .service is system services, and is default - the suffix is not really required
$ systemd-analyze blame  You can run this to find out how long it takes to boot all programs and services.
 systemctl list-unit-files --type=service displays the status of all installed services that have init scripts


The familiar /etc/inittab is no more. Instead, we have a /etc/systemd/system/ directory chock-full of symlinks to
files in /usr/lib/systemd/system/. /usr/lib/systemd/system/ contains init scripts; to start a service at boot
it must be linked to /etc/systemd/system/. The systemctl command does this for you when you enable a new service,
like this example:
$ systemctl enable ntp.service
ln -s '/usr/lib/systemd/system/ntp.service' '/etc/systemd/system/multi-user.target.wants/ntp.service'

This way, other scripts, perhaps SysV scripts that need this service can find it. So "systemctl enable myapp.service"
is required. Then  "systemctl status myapp.service" will show it as enabled. (This does not mean running BTW)
There are three possible states for a service: enabled or disabled, and static. Enabled means it has a symlink in a
.wants directory. Disabled means it does not. Static means the service is missing the [Install] section in its init
script, so you cannot enable or disable it. Static services are usually dependencies of other services, and are
controlled automatically. You can see this in the ClamAV example, as clamd@.service is a dependency of
clamd@scan.service, and it runs only when clamd@scan.service runs.

None of these states tell you if a service is running. The ps command will tell you, or use systemctl to get more
detailed information:

  $ systemctl status bluetooth.service
  bluetooth.service - Bluetooth service
     Loaded: loaded (/usr/lib.systemd/system/bluetooth.service; enabled)
     Active: active (running) since Thu 2014-09-14 6:40:11 PDT
    Main PID: 4964 (bluetoothd)
     CGroup: /system.slice/bluetooth.service
             |_4964 /usr/bin/bluetoothd -n
  systemctl tells you everything you want to know, if you know how to ask
systemctl logs to '/var/log/syslog' - so 'tail /var/log/syslog' shows all


Note the environment variable NODE_ENV=development above causes node to turn off caching among other things,
(but not your browser). Changing the environment variable NODE_ENV=production turns them back on.

******************************************************************************************************
              CONFIGURING WIRELESS INTERFACE(S)
******************************************************************************************************

Installing the Logic Supply UWN200 w/4" antenna:

The driver is already built-in to the distribution. However, we may have to modify /etc/network/interfaces
file to activate it. We will a little later on.
Step #1
root@beaglebone:~# lsmod       'will show you the driver is installed:
Module       Size Used by
g_multi       50407 2
libcomposite  15028 1 g_multi
mt7601Usta   641118 1          <- driver we are looking for, driver is located and installed
root@beaglebone:~#

also 'lsusb' will verify the USB interface -(this is a USB wireless adapter)

then
root@beaglebone:~# lsusb
Bus 001 Device 002: ID 148f:7601 Ralink Technology, Corp. <-- interface is active
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
root@beaglebone:~#

root@beaglebone:~# ifconfig -a will show that the interface is present. Note whether it has HW address assigned..
Step #2
root@beaglebone:~# ifconfig -a
eth0 Link encap:Ethernet HWaddr 1c:ba:8c:dc:c2:51
UP BROADCAST MULTICAST MTU:1500 Metric:1
RX packets:0 errors:0 dropped:0 overruns:0 frame:0
TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
collisions:0 txqueuelen:1000
RX bytes:0 (0.0 B) TX bytes:0 (0.0 B)
Interrupt:40

lo Link encap:Local Loopback
inet addr:127.0.0.1 Mask:255.0.0.0
inet6 addr: ::1/128 Scope:Host
UP LOOPBACK RUNNING MTU:65536 Metric:1
RX packets:0 errors:0 dropped:0 overruns:0 frame:0
TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
collisions:0 txqueuelen:0
RX bytes:0 (0.0 B) TX bytes:0 (0.0 B)

ra0 Link encap:Ethernet HWaddr 00:00:00:00:00:00    <----- Note here
BROADCAST MULTICAST MTU:1500 Metric:1
RX packets:0 errors:0 dropped:0 overruns:0 frame:0
TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
collisions:0 txqueuelen:1000
RX bytes:0 (0.0 B) TX bytes:0 (0.0 B)

usb0 Link encap:Ethernet HWaddr 02:aa:5e:71:1f:d3
inet addr:192.168.7.2 Bcast:192.168.7.3 Mask:255.255.255.252
inet6 addr: fe80::aa:5eff:fe71:1fd3/64 Scope:Link
UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1
RX packets:121 errors:0 dropped:0 overruns:0 frame:0
TX packets:108 errors:0 dropped:0 overruns:0 carrier:0
collisions:0 txqueuelen:1000
RX bytes:10453 (10.2 KiB) TX bytes:22672 (22.1 KiB)

ra0 does not have a hardware address, the mt7601Usta driver indicates that it is not being used. This is the
clue that the wireless interface is not enabled in /etc/network/interfaces file. Using 'wicd-curses' in the
next step will not detect any networks, because the network adapter is not powered-up. Another clue is that
a tiny LED is inside the adapter plug and is barely visible when powered up.

So modify /etc/network/interfaces, to include the following lines:

# WiFi Example
allow-hotplug ra0
iface ra0 inet dhcp    Note: This is in the Troubleshooting guide at end of
(REBOOT)               installation guide at http://inspire.logicsupply.com/2014/07/beaglebone-wifi-installation.html

Step #3
root@beaglebone:~# wicd-curses

wicd-curses is a great configuration tool, but everyone is having a problem with its initial use. It is
probably supposed to detect the presence of ra0 interface (the guide shows it self-detecting), turns out
you can go to preferences and tab to wireless inerface and just type it in. Hit OK and R(efresh) and it
starts scanning and shows the networks it sees.
Wireless Networks
C STR                    ESSID  ENCRYPT        BSSID        MODE      CHNL
73%                    MooreLAN Unsecured 60:C3:97:66:A6:FA Managed     1
47%                    MooreLAN Unsecured 00:12:17:75:05:5F Managed     6

Now we can highlight a network and hit 'C' to connect to it. The beaglebone will be assigned an IP address:
Connected to MooreLAN"  Nickname:"MT7601STA at 76% (IP: 192.168.1.139)
Step #4 There is also a graphical version of "wicd" you can run on the beaglebone desktop . You can
also  access the desktop using a direct connection or a VNC session. Again preference must be set to ra0.
Step#5 deleted
Step#6 Set security
 Go to 'Configure' Near the bottom see
[x] Use these settings for all networks sharing this essid
[x] Automatically connect to this network
[] Use Encryption
WPA 1/2 (hex [0-9/A-F])   vvv
Key *********

The wireless configuration settings for Wicd are stored in /etc/wicd/manager-settings.conf

********** End of UWN200 Installation
The following is for the Wifi stick "Ourlink". It requires installing the driver (on mini-DVD)
prior to start.
The debian wireless configuration is described in two parts: Installing the hardware and driver to get
iwconfig working, and the dealing with security and other issues to complete the installation.

1. The drivers will vary of course,with the particular firmware chosen for use. So far, we have played with
two USB direct plug-in wireless units:
  a. Adafruit PN #1012 "OURLINK" stick (Realtek RTL8188EUS/8189ES hardware)
    driver mini-DVD version is: v4.1.2.2_5805.20121116 Software Package - Linux Driver
  b. Logic_Supply     Model Number: UWN200 MediaTek MT7601 (Ralink 7601) Controller Wireless-N
The following article has much to say on this portion of the process:
         https://wiki.debian.org/WiFi
    also http://linuxforums.org.uk/index.php?topic=11261.0
Note that our driver is named

Once we have the driver, thru DVD or apt-get, the debian install is pretty much the following
procedure:

sudo apt-get install build-essential linux-headers-generic git
mkdir ~/RTL8188EU
then:
cd ~/RTL8188EU
git clone git://github.com/lwfinger/rtl8188eu
cd ~/RTL8188EU/rtl8188eu
make
sudo make install
sudo cp -v ~/RTL8188EU/rtl8188eu/rtl8188eufw.bin /lib/firmware/rtlwifi/
sudo depmod -a
sudo update-initramfs -u
sudo modprobe 8188eu
Wireless should spring to life.
=====================================================================
Unit Testing - Karma
=====================================================================

$ sudo npm install -g karma

In the base folder of you application directory:
$ karma init    will generate a dummy config file karma.conf.js

$ karma start [optionalPath ToConfigFile]

will start the Karma server on port 9876 (default). It should open up a browser and capture it
automatically.
$ karma run        will run the tests

In the Jasmine language, a typical test will look like:

describe("MyController:", function() {

  it("to work correctly", function() {
  var a = 12;
  var b = a;
  expect(a).toBe(b);
  expect(a).not.toBe(null);
  });
});

Other issues to review:  Integration with Webstorm & autoWatch
}
}

2.An excellent presentation of this process i in the article: https://wiki.debian.org/WiFi/HowToUse

*****************************************************************************************************************
                               HARDWARE & PANEL INSTALLATION
*****************************************************************************************************************

Considered rf transparent enclosures, but a better design is to use external antenna(s) with
sma connector extension cables.
Elk ELK-SWB14 Structured Wiring Box (hinged panel) w/ lock
PHYSICAL SPECIFICATIONS
Materials: Enclosure: 20-gauge, white powder-coated steel
Cover: 18-gauge, white powder-coated steel
Dimensions: Enclosure: 14.25” H x 14.25” W x 3.50” D
2" bott knockout bottom, 1/2",3/4",1 1/4" also - about $40.00
http://www.securitystoreusa.com/
ELK-SWP 4.75" multi-purpose adapter plate $8.44
ELK-SWG circuit board glides $3.59
ELK-SWNS-1 Nylon standoffs (pack of 10) $4.66
- See more at: http://www.broadbandutopia.com

I think a good supply design is a 12V system, trickle charger, and a dc-dc converter down to 5V. The
converters are pretty cheap, $8.00-$13.00 and then the options for the supply system are pretty open. A low battery
cutoff is used in systems to not deep drain the battery during extended power offs.

Digikey carries big assortment of CUI Inc Series PYB10-T & PYB10-U converters
Digikey PN 102-3154-ND $35.15 each 5V 100W ~2A should be good on 12v battery
CUI Inc. PN PYB10-Q24-S5-U ~300 in stock (digikey)

Also
RioRand® DC-DC LTC1871 Boost Converter Module 3.5-30V 100W With Voltmeter Display
$15.99 each direct order
Also LTC1871 $9.95 each! similar specs - we actuall need step down not boost. I know the one above will work in boost or non-boost
mode as the literature sayss input must be lower in boost mode.
They have a step-down converter LM2596 $11.96 for (2).

Bought (2)each of power units above.

Leviton 47605-C5B Category 5 Voice and Data Module 6-Port, Bracket   This looks great to start with- wire
inside the panel from beaglebone to punch-down. Leave the box with cat5 from the rj45's. $21.59 Found some for $15.

http://www.riorand.com/electronics/riorandr-dc-dc-ltc1871-boost-converter-module-3-5-30v-100w-with-voltmeter-display.html
Now lets find the trickle charger for 12V battery:
Digikey PN 271-2386-ND 12VDC @ 1.2A for lead-acid battery $54.65 each 2.5mm I.D. x 5.5mm O.D. Female
SL Power PN BVL121200003N  ~263 in stock (digikey) looks like a laptop charger